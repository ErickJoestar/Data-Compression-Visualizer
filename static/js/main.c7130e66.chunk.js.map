{"version":3,"sources":["Components/hash-table/index.js","DataStructures/TreeNode.js","Compression-Algorithms/huffman-code.js","Components/binary-tree/index.js","App.js","serviceWorker.js","index.js"],"names":["HashTable","className","data","onElementHover","onElementClick","map","el","i","key","value","TreeNode","parent","this","left","undefined","right","node","callback","acc","status","completed","stopDFS","_deepFirstSearch","currentHeight","stopBFS","queue","height","length","shift","push","generatePath","stop","history","slice","deepFirstSearch","Math","max","huffmanCode","text","hashTable","Map","Array","from","forEach","char","has","set","get","hashTableArray","priorityQueue","PriorityQueue","comparator","a","b","mapIter","entries","size","next","sort","counter","dequeue","setLeft","setRight","setParent","root","peek","BinaryTree","treeNode","useState","dimensions","width","paddingTopBottom","paddingLeftRight","nodeRadius","treeHeight","treeWidth","edges","vertex","state","setState","ref","useRef","console","log","useEffect","nodes","getNodesData","getHeight","getAbsolutePos","start","end","parentPos","x","hasLeft","hasRight","pos","to","s","svgContainer","d3","current","svgCircles","selectAll","svgPaths","edgesArr","path","xScale","domain","range","yScale","updateElementsPosition","lineGenerator","edge","attr","v","includes","on","handleMouseClick","e","props","getPath","transition","call","scaleExtent","translateExtent","extent","zoomTransform","transform","rescaleX","rescaleY","style","min","k","strokeWidth","r","App","setText","setHashTable","setTreeNode","spellCheck","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7130e66.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './style.css';\r\nimport '../../Common/containers.css'\r\n\r\nconst HashTable = ({ className = \"\", data = [], onElementHover, onElementClick }) => {\r\n  return (\r\n    <div className={`structure-container hash-table ${className} `}>\r\n      {data.map((el, i) => {\r\n        return <div key={el.key + i} className=\"hash-table__element\">\r\n          <div className=\"hash-table__key\">\r\n            <span>{el.key || \"‎‎\"}</span>\r\n          </div>\r\n          <div className=\"hash-table__value\">\r\n            <span>{el.value}</span>\r\n          </div>\r\n        </div>\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HashTable;","class TreeNode {\r\n  constructor(key = null, value = null, parent = this) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.parent = parent;\r\n  }\r\n\r\n  setLeft(node) {\r\n    this.left = node;\r\n    return this;\r\n  }\r\n  setRight(node) {\r\n    this.right = node;\r\n    return this;\r\n  }\r\n\r\n  setParent(node) {\r\n    this.parent = node;\r\n    return this;\r\n  }\r\n\r\n  setKey(key) {\r\n    this.key = key;\r\n    return this;\r\n  }\r\n\r\n  setValue(value) {\r\n    this.value = value;\r\n    return this;\r\n  }\r\n\r\n  deepFirstSearch(callback = () => null, acc = this.value) {\r\n    const status = {\r\n      completed: false\r\n    }\r\n    const stopDFS = () => status.completed = true;\r\n    return this._deepFirstSearch(callback, acc, 0, status, stopDFS)\r\n  }\r\n\r\n  _deepFirstSearch(callback, acc, currentHeight, status, stopDFS) {\r\n    if (!status.completed) {\r\n      acc = callback(acc, this, currentHeight, stopDFS);\r\n\r\n      if (!status.completed && this.left instanceof TreeNode) {\r\n        acc = this.left._deepFirstSearch(callback, acc, currentHeight + 1, status, stopDFS);\r\n      }\r\n\r\n      if (!status.completed && this.right instanceof TreeNode) {\r\n        acc = this.right._deepFirstSearch(callback, acc, currentHeight + 1, status, stopDFS);\r\n      }\r\n    }\r\n    return acc;\r\n  }\r\n\r\n  breadthFirstSearch(callback = () => null, acc = this.value) {\r\n    const status = {\r\n      completed: false\r\n    }\r\n    const stopBFS = () => status.completed = true;\r\n\r\n    const queue = [{ node: this, height: 0 }];\r\n    while (!status.completed && queue.length > 0) {\r\n      const { node, height } = queue.shift();\r\n      acc = callback(acc, node, height, stopBFS);\r\n      if (node.left instanceof TreeNode) {\r\n        queue.push({ node: node.left, height: height + 1 });\r\n      }\r\n      if (node.right instanceof TreeNode) {\r\n        queue.push({ node: node.right, height: height + 1 });\r\n      }\r\n    }\r\n    return acc;\r\n  }\r\n\r\n  getPath(key = 0) {\r\n    const generatePath = (acc, node, height, stop) => {\r\n      const history = acc.slice(0, height);\r\n      history.push(node.key);\r\n      if (node.key === key)\r\n        stop();\r\n      return history;\r\n    }\r\n    return this.deepFirstSearch(generatePath, []);\r\n  }\r\n\r\n  getHeight() {\r\n    const heightFunction = (acc, node, height) => {\r\n      return Math.max(height, acc);\r\n    }\r\n    return this.deepFirstSearch(heightFunction, 0);\r\n  }\r\n}\r\n\r\nexport default TreeNode;","import TreeNode from '../DataStructures/TreeNode';\r\nimport PriorityQueue from 'js-priority-queue';\r\n\r\nconst huffmanCode = (text) => {\r\n  let hashTable = new Map();\r\n  Array.from(text).forEach(char => {\r\n    if (hashTable.has(char)) {\r\n      hashTable.set(char, hashTable.get(char) + 1)\r\n    } else {\r\n      hashTable.set(char, 1);\r\n    }\r\n  })\r\n\r\n  const hashTableArray = [];\r\n  const priorityQueue = new PriorityQueue({ comparator: (a, b) => a.value - b.value });\r\n\r\n  let mapIter = hashTable.entries();\r\n  for (let i = 0; i < hashTable.size; i++) {\r\n    const [key, value] = mapIter.next().value;\r\n    hashTableArray.push({ key, value });\r\n    priorityQueue.queue(new TreeNode(key, value))\r\n  }\r\n  hashTableArray.sort((a, b) => b.value - a.value);\r\n\r\n  let counter = 0;\r\n  while (priorityQueue.length > 1) {\r\n    const left = priorityQueue.dequeue();\r\n    const right = priorityQueue.dequeue();\r\n    const node = new TreeNode(`vertex-${counter++}`, left.value + right.value)\r\n    node.setLeft(left).setRight(right);\r\n    left.setParent(node);\r\n    right.setParent(node);\r\n    priorityQueue.queue(node);\r\n  }\r\n  if (priorityQueue.length > 0) {\r\n    return { hashTable: hashTableArray, root: priorityQueue.peek() };\r\n  } else {\r\n    return { hashTable: hashTableArray, root: new TreeNode(\"vertex\", 0) }\r\n  }\r\n}\r\nexport default huffmanCode;","import React, { useState, useEffect, useRef } from 'react'\r\nimport TreeNode from '../../DataStructures/TreeNode'\r\nimport *  as d3 from 'd3';\r\n\r\nimport '../../Common/containers.css'\r\nimport '../../Common/colors.css';\r\nimport './style.css'\r\n\r\nconst NODE_RADIUS = 10;\r\nconst NODE_MARGIN = 10;\r\nconst WIDTH = 900;\r\n\r\nconst BinaryTree = ({ treeNode }) => {\r\n  const [state, setState] = useState({\r\n    dimensions: {\r\n      height: 0, width: WIDTH, paddingTopBottom: 50, paddingLeftRight: 20, nodeRadius: 32, treeHeight: 0, treeWidth: 0\r\n    }, edges: [], vertex: []\r\n  });\r\n  const ref = useRef(null);\r\n  console.log(treeNode);\r\n\r\n  useEffect(() => {\r\n    const nodes = {};\r\n    const getNodesData = (node, height) => {\r\n      let width = 0;\r\n      if (node.left instanceof TreeNode) {\r\n        width += getNodesData(node.left, height + 1);\r\n      }\r\n      if (node.right instanceof TreeNode) {\r\n        width += getNodesData(node.right, height + 1);\r\n      }\r\n      width = Math.max(1, width);\r\n      nodes[node.key] = {\r\n        value: node.value,\r\n        key: node.key,\r\n        width: width,\r\n        height: height,\r\n        left: node.left,\r\n        right: node.right\r\n      };\r\n      return width;\r\n    }\r\n    getNodesData(treeNode, 0);\r\n\r\n    const treeHeight = treeNode.getHeight();\r\n    const treeWidth = nodes[treeNode.key].width;\r\n    const nodeRadius = NODE_RADIUS;\r\n    /////// DIMENSIONS\r\n    const edges = [];\r\n\r\n    const getAbsolutePos = (node, start, end, parentPos = []) => {\r\n      if (node === undefined) return;\r\n      nodes[node.key].x = (start + end) / 2;\r\n      const { left, right } = node;\r\n      const hasLeft = left instanceof TreeNode;\r\n      const hasRight = right instanceof TreeNode;\r\n      const pos = [nodes[node.key].x, nodes[node.key].height];\r\n\r\n      if (parentPos.length > 0) {\r\n        edges.push({ from: parentPos, to: pos, key: node.key })\r\n      }\r\n      if (hasLeft && hasRight) {\r\n        getAbsolutePos(left, start, start + nodes[left.key].width / treeWidth, pos)\r\n        getAbsolutePos(right, start + nodes[left.key].width / treeWidth, end, pos)\r\n      } else if (hasLeft) {\r\n        getAbsolutePos(left, start, end, pos)\r\n      } else if (hasRight) {\r\n        getAbsolutePos(right, start, end, pos)\r\n      }\r\n    }\r\n\r\n    getAbsolutePos(nodes[treeNode.key], 0, 1);\r\n    /// Maping the values with d3\r\n\r\n    const vertex = [];\r\n    for (const key in nodes) {\r\n      vertex.push(nodes[key]);\r\n    }\r\n\r\n    setState(s => {\r\n      const height = (NODE_RADIUS + NODE_MARGIN) * treeHeight * 2 + s.dimensions.paddingTopBottom * 2\r\n\r\n      const dimensions = {\r\n        ...s.dimensions,\r\n        treeHeight: treeHeight,\r\n        treeWidth: treeWidth,\r\n        nodeRadius: nodeRadius,\r\n        height: height\r\n      }\r\n      return { dimensions, edges, vertex }\r\n    });\r\n  }, [treeNode])\r\n\r\n\r\n  useEffect(() => {\r\n    const { dimensions, vertex, edges } = state;\r\n    const svgContainer = d3.select(ref.current);\r\n    const svgCircles = svgContainer.selectAll('circle');\r\n    const svgPaths = svgContainer.selectAll('path');\r\n    let edgesArr = [];\r\n\r\n    let path = [];\r\n    /// Scales \r\n    let xScale = d3\r\n      .scaleLinear()\r\n      .domain([0, 1])\r\n      .range([dimensions.paddingLeftRight, dimensions.width - dimensions.paddingLeftRight]);\r\n    let yScale = d3\r\n      .scaleLinear()\r\n      .domain([dimensions.treeHeight, 0])\r\n      .range([dimensions.height - dimensions.paddingTopBottom, dimensions.paddingTopBottom]);\r\n\r\n    // Generaton the edges\r\n\r\n    /// Update the positions baes on the zoom\r\n    const updateElementsPosition = () => {\r\n      const lineGenerator = d3.line();\r\n\r\n      edgesArr = edges.map(edge => {\r\n        const from = [xScale(edge.from[0]), yScale(edge.from[1])];\r\n        const to = [xScale(edge.to[0]), yScale(edge.to[1])];\r\n        return ({ path: lineGenerator([from, to]), key: edge.key });\r\n      })\r\n\r\n      svgCircles\r\n        .data(vertex)\r\n        .attr('cx', v => xScale(v.x))\r\n        .attr('cy', v => yScale(v.height))\r\n        .attr('class', v => path.includes(v.key) ? 'tree_node selected' : 'tree_node')\r\n        .on('click', handleMouseClick)\r\n\r\n      svgPaths\r\n        .data(edgesArr)\r\n        .attr('d', e => e.path)\r\n        .attr('stroke', e => path.includes(e.key) ? '#f5d67b' : '#b3aca7')\r\n\r\n    }\r\n\r\n    /// Handling zoom \r\n    const handleZoom = () => {\r\n      const zoomTransform = d3.event.transform;\r\n      console.log(d3.event);\r\n      xScale = d3\r\n        .scaleLinear()\r\n        .domain([0, 1])\r\n        .range([dimensions.paddingLeftRight, dimensions.width - dimensions.paddingLeftRight]);\r\n      yScale = d3\r\n        .scaleLinear()\r\n        .domain([dimensions.treeHeight, 0])\r\n        .range([dimensions.height - dimensions.paddingTopBottom, dimensions.paddingTopBottom]);\r\n\r\n      if (zoomTransform) {\r\n        xScale.domain(zoomTransform.rescaleX(xScale).domain());\r\n        yScale.domain(zoomTransform.rescaleY(yScale).domain());\r\n        ref.current.style.transform = `scale(${Math.min(1, zoomTransform.k)})`\r\n      }\r\n      updateElementsPosition();\r\n    }\r\n\r\n    svgContainer\r\n      .call(d3.zoom()\r\n        .scaleExtent([1, 50])\r\n        .translateExtent([[-100, -100], [dimensions.width, dimensions.height]])\r\n        .extent([[-100, -100], [dimensions.width, dimensions.height]])\r\n        .on(\"zoom\", handleZoom));\r\n\r\n\r\n    /// Handling mouse interactions\r\n\r\n    function handleMouseClick(props) {\r\n      path = treeNode.getPath(props.key);\r\n      svgCircles\r\n        .data(vertex)\r\n        .transition()\r\n        .attr('class', v => path.includes(v.key) ? 'tree_node selected' : 'tree_node')\r\n      svgPaths\r\n        .data(edgesArr)\r\n        .attr('stroke', e => { console.log(e); return path.includes(e.key) ? '#f5d67b' : '#b3aca7' })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    updateElementsPosition();\r\n  }, [ref, state, treeNode])\r\n\r\n\r\n\r\n\r\n  return <div className=\"structure-container tree_container\" style={{ width: WIDTH }}>\r\n    <svg ref={ref} width={state.dimensions.width} height={state.dimensions.height} >\r\n      <g>\r\n        {console.log('RENDER')}\r\n        {state.edges.map((e, i) => <path className='fill-white tree_edge' key={i} strokeWidth={2} />)}\r\n        {state.vertex.map((v, i) => <circle className='tree_node' key={i} r={NODE_RADIUS} />)}\r\n      </g>\r\n    </svg>\r\n  </div>\r\n}\r\n\r\nexport default BinaryTree;","import React, { useEffect, useState } from 'react';\n\nimport HashTable from './Components/hash-table';\nimport TreeNode from './DataStructures/TreeNode';\nimport huffmanCode from './Compression-Algorithms/huffman-code';\n\nimport './Common/fonts.css'\nimport './Common/forms.css'\nimport BinaryTree from './Components/binary-tree';\n\nfunction App() {\n\n  const [text, setText] = useState(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");\n  const [hashTable, setHashTable] = useState([]);\n  const [treeNode, setTreeNode] = useState(new TreeNode(\"vertex\", 0));\n\n  useEffect(() => {\n    const data = huffmanCode(text);\n    setHashTable(data.hashTable);\n    setTreeNode(data.root);\n  }, [text])\n\n  return (\n    <div className=\"main\">\n      {/* <CodeSnippet /> */}\n      <textarea className=\"textarea\" spellCheck=\"false\" value={text} onChange={e => setText(e.target.value)} />\n      <BinaryTree treeNode={treeNode} />\n      <HashTable data={hashTable} />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}